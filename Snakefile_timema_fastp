import os
from itertools import product
import subprocess

test=1
if test==1: 
	SAMPLES=['Tcri_01'] 
	SPECIES=['Tcri']
else:
	SPECIES=["Tcri", "Tpop"]
	SAMPLES=[]
	for i in SPECIES:
		path= "/share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/"+i+"/Primary_Data/PopGen_Data/"
		print(path)
		output = subprocess.check_output("ls "+ path + " | grep '.fastq' | sed -e 's/\.fastq\.gz$//' | sed -r 's/.{8}$//'", shell=True) 
		out=output.decode()
		out=out.split('\n') 
		del out[-1]
		SAMPLES+=[out]
	SAMPLES= SAMPLES[0] + SAMPLES[1]
	
	
	def filter_combinator(combinator, blacklist):
		def filtered_combinator(*args, **kwargs):
			for wc_comb in combinator(*args, **kwargs):
				if frozenset(wc_comb) not in blacklist:
					yield wc_comb
		return filtered_combinator
		
	forbidden={'start'}
	for i in range(len(SPECIES)):
		for j in range(len(SAMPLES)):
			if SPECIES[i]!=SAMPLES[j][0:4]:
				forbidden|={frozenset({("sample",SAMPLES[j]),("species",SPECIES[i])})}
				
	forbidden.remove('start')
	filtered_product = filter_combinator(product, forbidden)

print(SPECIES)
print(SAMPLES)


rule all:  
	input:
		expand("/share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/{species}/Primary_Data/FastP/{sample}_R1.fastp.v1_1.fastq.gz",filtered_product,sample=SAMPLES,species=SPECIES),
		expand("/share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/{species}/Primary_Data/FastP/{sample}_R2.fastp.v1_1.fastq.gz",filtered_product,sample=SAMPLES,species=SPECIES),
        	expand("/share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/{species}/Primary_Data/FastP/{sample}.fastp_report.v1_1.html",filtered_product,sample=SAMPLES,species=SPECIES),
        	expand("/share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/{species}/Primary_Data/FastP/{sample}.fastp_report.v1_1.json",filtered_product,sample=SAMPLES,species=SPECIES)
		

rule process_fastp:
	input:
		raw_R1="/share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/{species}/Primary_Data/PopGen_Data/{sample}_R1.v1_1.fastq.gz",
		raw_R2="/share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/{species}/Primary_Data/PopGen_Data/{sample}_R2.v1_1.fastq.gz"
	output:
        	fastp_R1="/share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/{species}/Primary_Data/FastP/{sample}_R1.fastp.v1_1.fastq.gz",
        	fastp_R2="/share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/{species}/Primary_Data/FastP/{sample}_R2.fastp.v1_1.fastq.gz",
        	report_html="/share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/{species}/Primary_Data/FastP/{sample}.fastp_report.v1_1.html",
        	report_json="/share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/{species}/Primary_Data/FastP/{sample}.fastp_report.v1_1.json"
	message:
		"Fastp processing : {wildcards.sample}"
	shell : 
        	"/home/ysong/.pyenv/versions/miniconda3-4.3.30/bin/fastp "
        	"-i {input.raw_R1} "
        	"-I {input.raw_R2} "
        	"-o {output.fastp_R1} "
        	"-O {output.fastp_R2} "
        	"--trim_poly_g "
        	"--correction "
        	"--low_complexity_filter "
        	"--html {output.report_html} "
        	"--json {output.report_json} "
        	"--report_title {wildcards.sample} "
        	"--thread 8 "
		"--dont_overwrite && "
        	"python /share/tycho_poolz1/pagagnaire/BEM/TMP_Emma/Timema/Scripts/Extract_fastp_info_timema.py {wildcards.species} {wildcards.sample}"
